/* Nombre: .h
   Autor:
   Fecha:
   Descripción:
*/

#include"Grafo.h"


 /*****************************************************************************************
 **********************************   Constructores    ************************************
 *****************************************************************************************/

//*************************************************************************************
template<typename T>
Grafo<T>::Grafo()
{

}


//*************************************************************************************
template<typename T>
Grafo<T>::Grafo(const Grafo & grf)
{

}


//*************************************************************************************
template<typename T>
Grafo<T>::~Grafo()
{

}


 /*****************************************************************************************
 ************************************    Operadores    ************************************
 *****************************************************************************************/
//*************************************************************************************
template<typename T>
Grafo<T> & Grafo<T>::operator= (const Grafo<T> & grf)
{

}

 /*****************************************************************************************
 ********************************   Metodos y funciónes   *********************************
 *****************************************************************************************/

//*************************************************************************************
template<typename T>
bool Grafo<T>::Agregar(const T & eNodo)
{
    return true;
}


//*************************************************************************************
template<typename T>
bool Grafo<T>::Agregar(const T & nodo1, const T & nodo2)
{

}


//*************************************************************************************
template<typename T>
bool Grafo<T>::Eliminar(const T & eNodo)
{

}


//*************************************************************************************
template<typename T>
bool Grafo<T>::Eliminar(const T & nodo1, const T & nodo2)
{

}


//*************************************************************************************
template<typename T>
bool Grafo<T>::Buscar(const T & eNodo)
{

}


//*************************************************************************************
template<typename T>
bool Grafo<T>::Buscar(const T & nodo1, const T & nodo2)
{

}


//*************************************************************************************
template<typename T>
int Grafo<T>::GradoDe(const T & eNodo)
{

}


//*************************************************************************************
template<typename T>
int Grafo<T>::NumeroDeNodos(){}


//*************************************************************************************
template<typename T>
int Grafo<T>::NumeroDeAristas()
{


}


//*************************************************************************************
template<typename T>
bool Grafo<T>::VaciarNodo(const T & eNodo)
{

}


//*************************************************************************************
template<typename T>
bool Grafo<T>::VaciarGrafica()
{

}


//*************************************************************************************
template<typename T>
void Grafo<T>::Imprimir(std::ostream & salida/*=std::cout*/)
{

}


/*****************************************************************************************
 ************************************   Excepciónes   *************************************
 *****************************************************************************************/



 /*****************************************************************************************
 *********************************   Metodos privados   ***********************************
 *****************************************************************************************/
//*************************************************************************************
template<typename T>
typename Grafo<T>::Nodo * Grafo<T>::ObtenerDir(const T & eNodo)
{

}

 /*****************************************************************************************
 ***************************   Funciones externas y amigas   ******************************
 *****************************************************************************************/
template <typename t>
std::ostream & operator<<(std::ostream & salida,const Grafo<t> & grf)
{

}
