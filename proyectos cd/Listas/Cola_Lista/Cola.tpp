/* Nombre: Cola.tpp
   Autor: Luis Juventino Velasquez H.
   Fecha: 2/03/2020
   Descripción: Archivo de implementación de la clase Cola
*/

#include "Cola.h"

 /*****************************************************************************************
 **********************************   Constructores    ************************************
 *****************************************************************************************/

//*************************************************************************************
template <typename T>
Cola<T>::Cola()
{
    ultimo = NULL;
    tam= 0;
}


//*************************************************************************************
template <typename T>
Cola<T>::Cola(const Cola & cc)
{
    ultimo = NULL;
    tam= 0;
    *this = cc;
}


//*************************************************************************************
template <typename T>
Cola<T>::~Cola()
{
    Vaciar();
}


 /*****************************************************************************************
 ************************************    Operadores    ************************************
 *****************************************************************************************/

//*************************************************************************************
template <typename T>
Cola<T> & Cola<T>::operator= (const Cola<T> & cc)
{
    if(this == &cc) return *this;
    Vaciar();

    if(!cc.EstaVacia() )
    {
        Elemento *aux = cc.ultimo ->siguiente ;
        do
        {
            Encolar(aux->val);
            aux = aux->siguiente;
        }while(aux != cc.ultimo->siguiente);
    }

    return *this;
}

 /*****************************************************************************************
 ********************************   Metodos y funciónes   *********************************
 *****************************************************************************************/
//*************************************************************************************
template <typename T>
void Cola<T>::Encolar (const T & val)
{
    lista.AgregarAlPrincipio(val);
}


//*************************************************************************************
template <typename T>
void Cola<T>::Desencolar()
{

    lista.EliminarDelInicio();
}


//*************************************************************************************
template <typename T>
const T & Cola<T>::PrimElemento() const
{

    return lista.ObtenerPrimero();
}


//*************************************************************************************
template <typename T>
const T &  Cola<T>::UltElemento() const
{
    return lista.ObtenerUltimo();
}

//*************************************************************************************
template <typename T>
bool Cola<T>::EstaVacia() const
{
    return lista.EstaVacia();
}


//*************************************************************************************
template <typename T>
void Cola<T>::Imprimir() const
{
    std::cout<<lista;
}


//*************************************************************************************
template <typename T>
void Cola<T>::Vaciar()
{
    lista.Vaciar();
}


//*************************************************************************************
template <typename T>
unsigned int Cola<T>::ObtenerTam() const
{
    return lista.ObtenerTamano();
}


 /*****************************************************************************************
 ************************************   Excepciónes   *************************************
 *****************************************************************************************/

//*************************************************************************************
template <typename T>
const char * Cola<T>::ColaVacia::what() const throw()
{
    return "Cola vac\24a";
}


 /*****************************************************************************************
 *********************************   Funciones Amigas  ************************************
 *****************************************************************************************/
//*************************************************************************************
template <typename t>
std::ostream & operator<<(std::ostream & salida ,const Cola<t> & cc )
{
    salida<<"Cola: "<<cc.lista;
    return salida;

}
