#ifndef COLA_H_INCLUDED
#define COLA_H_INCLUDED

/* Nombre: .h
   Autor:
   Fecha:
   Descripción:
*/

#include<iostream>
#include<stdexcept>

template <typename T=int>
class Cola
{

 /*****************************************************************************************
 ***************************   Funciones externas y amigas   ******************************
 *****************************************************************************************/


    //*************************************************************************************
    /** \brief imprime una matriz en un flujo de salida
    *
    * \param salida el flujo de salida
    * \return El mismo flujo de salida
    *
    */template <typename t>
    friend std::ostream & operator<<(std::ostream & salida,const Cola<t> c);

public:

 /*****************************************************************************************
 **********************************   Constructores    ************************************
 *****************************************************************************************/

    //*************************************************************************************
    /** \brief Constructor de dos parámetros
    *
    */Cola();


    //*************************************************************************************
    /** \brief Constructor de copias
    *
    */Cola(const Cola & mtz);


    //*************************************************************************************
    /** \brief Destructor de la clase
    *
    */~Cola();



 /*****************************************************************************************
 ************************************    Operadores    ************************************
 *****************************************************************************************/


    //*************************************************************************************
    /** \brief
    *
    * \exception std::bad_alloc
    *
    */Cola & operator= (const Cola & mtz);



 /*****************************************************************************************
 ********************************   Metodos y funciónes   *********************************
 *****************************************************************************************/

    //*************************************************************************************
    /** \brief
    *
    * \exception std::bad_alloc
    *
    */void Encolar (const T val);

    //*************************************************************************************
    /** \brief
    *
    *
    */void Pop ();

    //*************************************************************************************
    /** \brief
    *
    *
    */bool EstaVacia() const;

    //*************************************************************************************
    /** \brief
    *
    *
    */const T & ObtenerElemento() const;

    //*************************************************************************************
    /** \brief
    *
    */unsigned int ObtenerTam() const;


    //*************************************************************************************
    /** \brief
    *
    */void Imprimir() const;

    //*************************************************************************************
    /** \brief
    *
    */void Vaciar();


 /*****************************************************************************************
 ************************************   Excepciónes   *************************************
 *****************************************************************************************/
    //*************************************************************************************
    class PilaVacia: public std::exception
    {
        public:
            virtual const char * what() const throw();
        private:

    };

private:

    unsigned int tam;
  /*****************************************************************************************
 ******************************  Tipos/Metodos privados  ***********************************
 *****************************************************************************************/
    struct Elemento
    {
        T val;
        Elemento * siguiente;
        Elemento(T val, Elemento * Siguiente=NULL);
    }*primero, *ultimo;
};



#endif // COLA_H_INCLUDED
