/* Nombre: .cpp
   Autor:
   Fecha:
   Descripción:
*/

#include"Pila.h"

 /*****************************************************************************************
 ********************************** Constructores *****************************************
 *****************************************************************************************/

//*************************************************************************************
template <typename T>
Pila<T>::Pila(): tam(0), tope(NULL)
{

}

//*************************************************************************************
template <typename T>
Pila<T>::Pila(const Pila & p): tam(0), tope(NULL)
{
    *this = p;
}

//*************************************************************************************
template <typename T>
Pila<T>::~Pila()
{

}


 /*****************************************************************************************
 *****************************       Operadores      **************************************
 *****************************************************************************************/

//*************************************************************************************
template <typename T>
Pila<T> & Pila<T>::operator= (const Pila & p)
{

}


 /*****************************************************************************************
 *********************************        Metodos      ************************************
 *****************************************************************************************/

//*************************************************************************************
template <typename T>
void Pila<T>::Apilar(const T & val)
{
    Elemento * nuevo = new Elemento(val, tope);
    tope = nuevo;
    ++tam;
}

//*************************************************************************************
template <typename T>
void Pila<T>::Desapilar()
{
    if(EstaVacia) throw PilaVacia();
    Elemento * aux= tope;
    tope=tope->siguiente;
    delete aux;
    --tam;
}

//*************************************************************************************
template <typename T >
const T & Pila<T>::ConocerElemento() const
{
    if(EstaVacia) throw PilaVacia();
    return tope->valor;
}

//*************************************************************************************
template <typename T>
bool Pila<T>::EstaVacia() const
{
    return tam==SIN_ELEMENTOS;
}

//*************************************************************************************
template <typename T>
void Pila<T>::Vaciar()
{
    while(!EstaVacia()) Desapilar();
}


 /*****************************************************************************************
 ******************        Funciones externas y amigas      *******************************
 *****************************************************************************************/

//*************************************************************************************
template <typename T >
const char * Pila<T>::PilaVacia::what() const throw()
{
    return "No hay nada";
}

//*************************************************************************************
template <typename T >
Pila<T>::Elemento::Elemento(T val, Elemento * sig /*= null*/)
{
    valor = val;
    siguiente = sig;
}


 /*****************************************************************************************
 *************************       Funciones Auxiliares      ********************************
 *****************************************************************************************/

